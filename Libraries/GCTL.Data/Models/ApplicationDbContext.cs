// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace GCTL.Data.Models
{
    public partial class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext()
        {
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccCashFlowType> AccCashFlowType { get; set; }
        public virtual DbSet<AccCompanyOpeningBalance> AccCompanyOpeningBalance { get; set; }
        public virtual DbSet<AccControlLedger> AccControlLedger { get; set; }
        public virtual DbSet<AccGeneralLedger> AccGeneralLedger { get; set; }
        public virtual DbSet<AccSubControlLedger> AccSubControlLedger { get; set; }
        public virtual DbSet<AccSubSubsidiaryLedger> AccSubSubsidiaryLedger { get; set; }
        public virtual DbSet<AccSubsidiaryLedger> AccSubsidiaryLedger { get; set; }
        public virtual DbSet<AccVoucherEntry> AccVoucherEntry { get; set; }
        public virtual DbSet<AccVoucherEntryDetails> AccVoucherEntryDetails { get; set; }
        public virtual DbSet<AccVoucherType> AccVoucherType { get; set; }
        public virtual DbSet<CoreAccessCode> CoreAccessCode { get; set; }
        public virtual DbSet<CoreAccessCode2> CoreAccessCode2 { get; set; }
        public virtual DbSet<CoreAccessCode3> CoreAccessCode3 { get; set; }
        public virtual DbSet<CoreBankAccountInformation> CoreBankAccountInformation { get; set; }
        public virtual DbSet<CoreBranch> CoreBranch { get; set; }
        public virtual DbSet<CoreCompany> CoreCompany { get; set; }
        public virtual DbSet<CoreCountry> CoreCountry { get; set; }
        public virtual DbSet<CoreMeasurementUnit> CoreMeasurementUnit { get; set; }
        public virtual DbSet<CoreMenuTab> CoreMenuTab { get; set; }
        public virtual DbSet<CoreMenuTab2> CoreMenuTab2 { get; set; }
        public virtual DbSet<CoreUserInfo> CoreUserInfo { get; set; }
        public virtual DbSet<HmsExpenseEntry> HmsExpenseEntry { get; set; }
        public virtual DbSet<HmsShift> HmsShift { get; set; }
        public virtual DbSet<HrmDefDepartment> HrmDefDepartment { get; set; }
        public virtual DbSet<HrmDefDesignation> HrmDefDesignation { get; set; }
        public virtual DbSet<HrmDefReligion> HrmDefReligion { get; set; }
        public virtual DbSet<HrmDefSex> HrmDefSex { get; set; }
        public virtual DbSet<HrmEmployee> HrmEmployee { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<PosPaymentType> PosPaymentType { get; set; }
        public virtual DbSet<PosTrType> PosTrType { get; set; }
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<RmgProdDefUnitType> RmgProdDefUnitType { get; set; }
        public virtual DbSet<SalesDefBankBranchInfo> SalesDefBankBranchInfo { get; set; }
        public virtual DbSet<SalesDefBankInfo> SalesDefBankInfo { get; set; }
        public virtual DbSet<SalesDefPaymentMode> SalesDefPaymentMode { get; set; }
        public virtual DbSet<SalesDefPaymentType> SalesDefPaymentType { get; set; }
        public virtual DbSet<TblReportFormat> TblReportFormat { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<AccCashFlowType>(entity =>
            {
                entity.HasKey(e => e.AutoId)
                    .HasName("PK__Acc_Cash__385EFE48A1D45A14");

                entity.ToTable("Acc_CashFlowType");

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.CashFlowTypeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("CashFlowTypeID");

                entity.Property(e => e.CashFlowTypeName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<AccCompanyOpeningBalance>(entity =>
            {
                entity.HasKey(e => e.ComOpeningBalanceCode)
                    .HasName("PK__Acc_Comp__2DAAD14D5C4712F1");

                entity.ToTable("Acc_Company_Opening_Balance");

                entity.Property(e => e.ComOpeningBalanceCode).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.MainCompanyCode)
                    .HasMaxLength(50)
                    .HasColumnName("Main_CompanyCode");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OpeningBalance).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.SubSusidiaryLedgerCodeNo).HasMaxLength(50);

                entity.Property(e => e.TrType).HasMaxLength(50);

                entity.Property(e => e.UserInfoEmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("UserInfoEmployeeID");
            });

            modelBuilder.Entity<AccControlLedger>(entity =>
            {
                entity.HasKey(e => e.ControlLedgerCodeNo)
                    .HasName("PK__Acc_Cont__4E839A2661AD8C65");

                entity.ToTable("Acc_ControlLedger");

                entity.Property(e => e.ControlLedgerCodeNo).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.ControlLedgerName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ShortName).HasMaxLength(50);
            });

            modelBuilder.Entity<AccGeneralLedger>(entity =>
            {
                entity.HasKey(e => e.GeneralLedgerCodeNo)
                    .HasName("PK__Acc_Gene__BF151D5C98E7E6A6");

                entity.ToTable("Acc_GeneralLedger");

                entity.Property(e => e.GeneralLedgerCodeNo).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.CashFlowTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("CashFlowTypeID");

                entity.Property(e => e.GeneralLedgerName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ShortName).HasMaxLength(50);

                entity.Property(e => e.SubControlLedgerCodeNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<AccSubControlLedger>(entity =>
            {
                entity.HasKey(e => e.SubControlLedgerCodeNo)
                    .HasName("PK__Acc_SubC__A54A77E63AD14222");

                entity.ToTable("Acc_SubControlLedger");

                entity.Property(e => e.SubControlLedgerCodeNo).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.ControlLedgerCodeNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ShortName).HasMaxLength(50);

                entity.Property(e => e.SubControlLedgerName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<AccSubSubsidiaryLedger>(entity =>
            {
                entity.HasKey(e => e.SubSusidiaryLedgerCodeNo)
                    .HasName("PK__Acc_SubS__740476E1FD230E83");

                entity.ToTable("Acc_SubSubsidiaryLedger");

                entity.Property(e => e.SubSusidiaryLedgerCodeNo).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.CashFlowTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("CashFlowTypeID");

                entity.Property(e => e.CostCenterCodeNo).HasMaxLength(50);

                entity.Property(e => e.IsActive)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OpeningBalance).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OpeningDate).HasColumnType("datetime");

                entity.Property(e => e.ShortName).HasMaxLength(50);

                entity.Property(e => e.SubSubsidiaryLedgerName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SubsidiaryLedgerCodeNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TrType)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<AccSubsidiaryLedger>(entity =>
            {
                entity.HasKey(e => e.SusidiaryLedgerCodeNo)
                    .HasName("PK__Acc_Subs__DFD2E1178C526C12");

                entity.ToTable("Acc_SubsidiaryLedger");

                entity.Property(e => e.SusidiaryLedgerCodeNo).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.GeneralLedgerCodeNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ShortName).HasMaxLength(50);

                entity.Property(e => e.SubsidiaryLedgerName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<AccVoucherEntry>(entity =>
            {
                entity.HasKey(e => e.VoucherEntryAutoId)
                    .HasName("PK__POS_Sale__3214E408C4A7AF46");

                entity.ToTable("Acc_VoucherEntry");

                entity.Property(e => e.VoucherEntryAutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("VoucherEntryAutoID");

                entity.Property(e => e.ApprovedBy).HasMaxLength(50);

                entity.Property(e => e.ApprovedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CheckedBy).HasMaxLength(50);

                entity.Property(e => e.CheckedDateTime).HasColumnType("datetime");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.CostCenterCodeNo).HasMaxLength(50);

                entity.Property(e => e.FinancialYear).HasMaxLength(50);

                entity.Property(e => e.InvoiceFor).HasMaxLength(50);

                entity.Property(e => e.InvoiceNo).HasMaxLength(100);

                entity.Property(e => e.IsApproved).HasMaxLength(50);

                entity.Property(e => e.IsChecked).HasMaxLength(50);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.MainCompanyCode)
                    .HasMaxLength(50)
                    .HasColumnName("Main_CompanyCode");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PeriodCodeNo).HasMaxLength(50);

                entity.Property(e => e.UserInfoEmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("UserInfoEmployeeID");

                entity.Property(e => e.VoucherDate).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VoucherTypeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("VoucherType_Code");
            });

            modelBuilder.Entity<AccVoucherEntryDetails>(entity =>
            {
                entity.HasKey(e => e.AutoId)
                    .HasName("PK__Acc_Vouc__385EFE4875F0E185");

                entity.ToTable("Acc_VoucherEntryDetails");

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.AccCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.ChequeNo).HasMaxLength(100);

                entity.Property(e => e.CreditAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.DebitAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TrType)
                    .IsRequired()
                    .HasMaxLength(2);

                entity.Property(e => e.VoucherEntryAutoId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("VoucherEntryAutoID");

                entity.Property(e => e.VoucherEntryDetailsCodeNo).HasMaxLength(50);

                entity.HasOne(d => d.VoucherEntryAuto)
                    .WithMany(p => p.AccVoucherEntryDetails)
                    .HasForeignKey(d => d.VoucherEntryAutoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Acc_VoucherEntryDetails_v");
            });

            modelBuilder.Entity<AccVoucherType>(entity =>
            {
                entity.HasKey(e => e.AutoId)
                    .HasName("PK__Acc_Vouc__385EFE4893F49604");

                entity.ToTable("Acc_VoucherType");

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.VoucherTypeCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("VoucherType_Code");

                entity.Property(e => e.VoucherTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Voucher_TypeName");
            });

            modelBuilder.Entity<CoreAccessCode>(entity =>
            {
                entity.HasKey(e => e.AccessId);

                entity.ToTable("Core_AccessCode");

                entity.Property(e => e.AccessCodeId).HasMaxLength(50);

                entity.Property(e => e.ControllerName).HasMaxLength(100);

                entity.Property(e => e.Icon).HasMaxLength(50);

                entity.Property(e => e.MenuId).HasMaxLength(50);

                entity.Property(e => e.MenuText).HasMaxLength(100);

                entity.Property(e => e.OrderBy).HasDefaultValueSql("((1))");

                entity.Property(e => e.ParentId).HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(250);

                entity.Property(e => e.ViewName).HasMaxLength(100);
            });

            modelBuilder.Entity<CoreAccessCode2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Core_AccessCode2");

                entity.Property(e => e.AccessCodeId)
                    .HasMaxLength(50)
                    .HasColumnName("AccessCodeID");

                entity.Property(e => e.AccessId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AccessID");

                entity.Property(e => e.ChkAdd)
                    .HasMaxLength(10)
                    .HasColumnName("chkAdd");

                entity.Property(e => e.ChkDelete)
                    .HasMaxLength(10)
                    .HasColumnName("chkDelete");

                entity.Property(e => e.ChkEdit)
                    .HasMaxLength(10)
                    .HasColumnName("chkEdit");

                entity.Property(e => e.ChkPrint)
                    .HasMaxLength(10)
                    .HasColumnName("chkPrint");

                entity.Property(e => e.ControllerName).HasMaxLength(100);

                entity.Property(e => e.Icon).HasMaxLength(50);

                entity.Property(e => e.MenuId).HasMaxLength(50);

                entity.Property(e => e.MenuText).HasMaxLength(100);

                entity.Property(e => e.OrderBy).HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasMaxLength(100)
                    .HasColumnName("ParentID");

                entity.Property(e => e.Title)
                    .HasMaxLength(250)
                    .HasColumnName("title");

                entity.Property(e => e.TitleCheck).HasMaxLength(10);

                entity.Property(e => e.ViewName).HasMaxLength(100);
            });

            modelBuilder.Entity<CoreAccessCode3>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Core_AccessCode3");

                entity.Property(e => e.AccessCodeId)
                    .HasMaxLength(50)
                    .HasColumnName("AccessCodeID");

                entity.Property(e => e.AccessId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("AccessID");

                entity.Property(e => e.ChkAdd)
                    .HasMaxLength(10)
                    .HasColumnName("chkAdd");

                entity.Property(e => e.ChkDelete)
                    .HasMaxLength(10)
                    .HasColumnName("chkDelete");

                entity.Property(e => e.ChkEdit)
                    .HasMaxLength(10)
                    .HasColumnName("chkEdit");

                entity.Property(e => e.ChkPrint)
                    .HasMaxLength(10)
                    .HasColumnName("chkPrint");

                entity.Property(e => e.ControllerName).HasMaxLength(100);

                entity.Property(e => e.Icon).HasMaxLength(50);

                entity.Property(e => e.MenuId).HasMaxLength(50);

                entity.Property(e => e.MenuText).HasMaxLength(100);

                entity.Property(e => e.OrderBy).HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasMaxLength(100)
                    .HasColumnName("ParentID");

                entity.Property(e => e.Title)
                    .HasMaxLength(250)
                    .HasColumnName("title");

                entity.Property(e => e.TitleCheck).HasMaxLength(10);

                entity.Property(e => e.ViewName).HasMaxLength(100);
            });

            modelBuilder.Entity<CoreBankAccountInformation>(entity =>
            {
                entity.HasKey(e => e.AccInfoId)
                    .HasName("PK__Core_Ban__7DC1C2FF6B857AB1");

                entity.ToTable("Core_BankAccountInformation");

                entity.Property(e => e.AccInfoId)
                    .HasMaxLength(50)
                    .HasColumnName("AccInfoID");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.AccountNo).HasMaxLength(250);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.BankId)
                    .HasMaxLength(50)
                    .HasColumnName("BankID");

                entity.Property(e => e.BranchId)
                    .HasMaxLength(50)
                    .HasColumnName("BranchID");

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("datetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CoreBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Core_Branch");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.BranchCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Ldate)
                    .HasColumnType("datetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CoreCompany>(entity =>
            {
                entity.HasKey(e => e.CompanyCode);

                entity.ToTable("Core_Company");

                entity.Property(e => e.CompanyCode).HasMaxLength(10);

                entity.Property(e => e.BaseCurrency).HasMaxLength(150);

                entity.Property(e => e.City).HasMaxLength(150);

                entity.Property(e => e.CompanyBanglaName).HasMaxLength(500);

                entity.Property(e => e.CompanyName).HasMaxLength(300);

                entity.Property(e => e.CompanyShortName).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(150);

                entity.Property(e => e.Fax).HasMaxLength(100);

                entity.Property(e => e.HotLine).HasMaxLength(150);

                entity.Property(e => e.Ldate)
                    .HasColumnType("datetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(150)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser")
                    .IsFixedLength();

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.Phone1).HasMaxLength(150);

                entity.Property(e => e.Phone2).HasMaxLength(100);

                entity.Property(e => e.RegNo).HasMaxLength(100);

                entity.Property(e => e.State).HasMaxLength(150);

                entity.Property(e => e.Tin)
                    .HasMaxLength(150)
                    .HasColumnName("TIN");

                entity.Property(e => e.Url).HasColumnName("URL");

                entity.Property(e => e.ZipCode).HasMaxLength(200);
            });

            modelBuilder.Entity<CoreCountry>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Core_Country");

                entity.Property(e => e.CountryCode).ValueGeneratedOnAdd();

                entity.Property(e => e.CountryId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CountryID");

                entity.Property(e => e.CountryName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ioccode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("IOCCode");

                entity.Property(e => e.Isocode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ISOCode");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(100)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CoreMeasurementUnit>(entity =>
            {
                entity.HasKey(e => e.AutoId)
                    .HasName("PK__Core_Mea__6B232905B6B4379A");

                entity.ToTable("Core_MeasurementUnit");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoreMenuTab>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Core_MenuTab");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("id");

                entity.Property(e => e.MenuId)
                    .HasMaxLength(50)
                    .HasColumnName("MenuID");

                entity.Property(e => e.OrderBy).HasMaxLength(50);

                entity.Property(e => e.PageUrl).HasMaxLength(255);

                entity.Property(e => e.ParentId)
                    .HasMaxLength(50)
                    .HasColumnName("ParentID");

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .HasColumnName("title");
            });

            modelBuilder.Entity<CoreMenuTab2>(entity =>
            {
                entity.HasKey(e => e.AutoId)
                    .HasName("PK__Core_Men__3214EC2726555A00");

                entity.ToTable("Core_MenuTab2");

                entity.Property(e => e.ControllerName).HasMaxLength(100);

                entity.Property(e => e.Icon).HasMaxLength(50);

                entity.Property(e => e.MenuId).HasMaxLength(50);

                entity.Property(e => e.OrderBy).HasDefaultValueSql("((1))");

                entity.Property(e => e.ParentId).HasMaxLength(100);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.ViewName).HasMaxLength(100);
            });

            modelBuilder.Entity<CoreUserInfo>(entity =>
            {
                entity.ToTable("Core_UserInfo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AccessCode)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(100)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.EntryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(150)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(250)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(250)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Role).HasMaxLength(50);

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(250);
            });

            modelBuilder.Entity<HmsExpenseEntry>(entity =>
            {
                entity.HasKey(e => e.ExpenseCode)
                    .HasName("PK_ExpenseEntry");

                entity.ToTable("HMS_ExpenseEntry");

                entity.Property(e => e.ExpenseCode).HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AutoId).ValueGeneratedOnAdd();

                entity.Property(e => e.BankAccountNo).HasMaxLength(50);

                entity.Property(e => e.BkashNo).HasMaxLength(50);

                entity.Property(e => e.ChequeDate).HasColumnType("datetime");

                entity.Property(e => e.ChequeNo).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.ExpenseDate).HasColumnType("datetime");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaymentMode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubSusidiaryLedgerCodeNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TransferBankFrom).HasMaxLength(50);

                entity.Property(e => e.TransferBankTo).HasMaxLength(50);
            });

            modelBuilder.Entity<HmsShift>(entity =>
            {
                entity.HasKey(e => e.ShiftCode);

                entity.ToTable("HMS_Shift");

                entity.Property(e => e.ShiftCode).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.BanglaShift).HasMaxLength(100);

                entity.Property(e => e.BanglaShortName).HasMaxLength(100);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.InTime).HasColumnType("smalldatetime");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OutTime).HasColumnType("smalldatetime");

                entity.Property(e => e.ShiftName).HasMaxLength(100);

                entity.Property(e => e.ShiftShortName).HasMaxLength(50);
            });

            modelBuilder.Entity<HrmDefDepartment>(entity =>
            {
                entity.HasKey(e => e.DepartmentCode);

                entity.ToTable("HRM_Def_Department");

                entity.Property(e => e.DepartmentCode).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.BanglaDepartment).HasMaxLength(100);

                entity.Property(e => e.BanglaShortName).HasMaxLength(100);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.DepartmentName).HasMaxLength(100);

                entity.Property(e => e.DepartmentShortName).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<HrmDefDesignation>(entity =>
            {
                entity.HasKey(e => e.DesignationCode);

                entity.ToTable("HRM_Def_Designation");

                entity.Property(e => e.DesignationCode).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.BanglaDesignation).HasMaxLength(100);

                entity.Property(e => e.BanglaShortName).HasMaxLength(100);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.DesignationName).HasMaxLength(100);

                entity.Property(e => e.DesignationShortName).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.GradeCode).HasMaxLength(50);

                entity.Property(e => e.Ldate)
                    .HasColumnType("datetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.StepNoId).HasMaxLength(50);
            });

            modelBuilder.Entity<HrmDefReligion>(entity =>
            {
                entity.HasKey(e => e.ReligionCode)
                    .HasName("PK__HRM_Def___68253768FC9CFC00");

                entity.ToTable("HRM_Def_Religion");

                entity.Property(e => e.ReligionCode).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Religion)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ShortName).HasMaxLength(50);
            });

            modelBuilder.Entity<HrmDefSex>(entity =>
            {
                entity.HasKey(e => e.SexCode)
                    .HasName("PK__HRM_Def___91EA025FE1A9B410");

                entity.ToTable("HRM_Def_Sex");

                entity.Property(e => e.SexCode).HasMaxLength(50);

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Sex)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<HrmEmployee>(entity =>
            {
                entity.HasKey(e => e.EmployeeId)
                    .HasName("PK__HRM_Empl__7AD04FF17E8F7FFC");

                entity.ToTable("HRM_Employee");

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.AutoId)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("autoId");

                entity.Property(e => e.BloodGroupCode).HasMaxLength(50);

                entity.Property(e => e.BranchCode).HasMaxLength(50);

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.DateOfBirth).HasColumnType("datetime");

                entity.Property(e => e.DepartmentCode).HasMaxLength(50);

                entity.Property(e => e.DesignationCode).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmployeeStatus).HasMaxLength(50);

                entity.Property(e => e.FatherName).HasMaxLength(100);

                entity.Property(e => e.FingerPrintId).HasMaxLength(50);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.MobileNo).HasMaxLength(50);

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.MotherName).HasMaxLength(100);

                entity.Property(e => e.NationalIdNo).HasMaxLength(50);

                entity.Property(e => e.NationalityCode).HasMaxLength(50);

                entity.Property(e => e.PermanentAddress).HasMaxLength(500);

                entity.Property(e => e.PresentAddress).HasMaxLength(500);

                entity.Property(e => e.ReligionCode).HasMaxLength(50);

                entity.Property(e => e.SexCode).HasMaxLength(50);
            });

            modelBuilder.Entity<Logs>(entity =>
            {
                entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            });

            modelBuilder.Entity<PosPaymentType>(entity =>
            {
                entity.HasKey(e => e.Tc)
                    .HasName("PK__POS_Paym__3214E408DF1F0198");

                entity.ToTable("POS_PaymentType");

                entity.Property(e => e.Tc)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TC");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("datetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(100)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentName).HasMaxLength(200);

                entity.Property(e => e.PaymentTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentTypeID");
            });

            modelBuilder.Entity<PosTrType>(entity =>
            {
                entity.HasKey(e => e.TrTypeId)
                    .HasName("PK__POS_TrTy__CE1FA55294E25799");

                entity.ToTable("POS_TrType");

                entity.Property(e => e.TrTypeId)
                    .HasMaxLength(50)
                    .HasColumnName("TrTypeID");

                entity.Property(e => e.CompanyCode).HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("datetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(100)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(100)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.Tc)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TC");

                entity.Property(e => e.TrTypeName).IsRequired();
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdatedAt).HasColumnType("datetime");

                entity.HasOne(d => d.CreatedByNavigation)
                    .WithMany(p => p.ProductCategoryCreatedByNavigation)
                    .HasForeignKey(d => d.CreatedBy)
                    .HasConstraintName("FK_CreatedBy_Core_UserInfo_CreatedBy");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_ParentId_ProductCategory");

                entity.HasOne(d => d.UpdatedByNavigation)
                    .WithMany(p => p.ProductCategoryUpdatedByNavigation)
                    .HasForeignKey(d => d.UpdatedBy)
                    .HasConstraintName("FK_UpdatedBy_Core_UserInfo_UpdatedBy");
            });

            modelBuilder.Entity<RmgProdDefUnitType>(entity =>
            {
                entity.HasKey(e => e.UnitTypId)
                    .HasName("PK__RMG_Prod__FA7636DD56B04C57");

                entity.ToTable("RMG_Prod_Def_UnitType");

                entity.Property(e => e.UnitTypId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("UnitTypID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TC");

                entity.Property(e => e.UnitTypeName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesDefBankBranchInfo>(entity =>
            {
                entity.HasKey(e => e.BankBranchId)
                    .HasName("PK__Sales_De__135DBA9558817145");

                entity.ToTable("Sales_Def_BankBranchInfo");

                entity.Property(e => e.BankBranchId)
                    .HasMaxLength(50)
                    .HasColumnName("BankBranchID");

                entity.Property(e => e.Address).HasMaxLength(250);

                entity.Property(e => e.AutoId).ValueGeneratedOnAdd();

                entity.Property(e => e.BankBranchName).HasMaxLength(50);

                entity.Property(e => e.BankId)
                    .HasMaxLength(50)
                    .HasColumnName("BankID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(150)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(250)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Phone).HasMaxLength(250);

                entity.Property(e => e.ShortName).HasMaxLength(50);

                entity.Property(e => e.Swiftcode)
                    .HasMaxLength(50)
                    .HasColumnName("SWIFTCode");
            });

            modelBuilder.Entity<SalesDefBankInfo>(entity =>
            {
                entity.HasKey(e => e.AutoId)
                    .HasName("PK__SALES_De__6B23290585139D21");

                entity.ToTable("SALES_Def_BankInfo");

                entity.Property(e => e.BankId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BankID");

                entity.Property(e => e.BankName).HasMaxLength(50);

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(150)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(250)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(100)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ShortName).HasMaxLength(50);
            });

            modelBuilder.Entity<SalesDefPaymentMode>(entity =>
            {
                entity.HasKey(e => e.PaymentModeId)
                    .HasName("PK__Sales_De__F9599529B899F3E3");

                entity.ToTable("Sales_Def_PaymentMode");

                entity.Property(e => e.PaymentModeId)
                    .HasMaxLength(50)
                    .HasColumnName("PaymentModeID");

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmployeeId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("EmployeeID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("datetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentModeName).HasMaxLength(250);

                entity.Property(e => e.PaymentModeShortName).HasMaxLength(50);
            });

            modelBuilder.Entity<SalesDefPaymentType>(entity =>
            {
                entity.HasKey(e => e.PaymentTypeId);

                entity.ToTable("Sales_Def_PaymentType");

                entity.Property(e => e.PaymentTypeId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PaymentTypeID");

                entity.Property(e => e.Ldate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LDate");

                entity.Property(e => e.Lip)
                    .HasMaxLength(50)
                    .HasColumnName("LIP");

                entity.Property(e => e.Lmac)
                    .HasMaxLength(50)
                    .HasColumnName("LMAC");

                entity.Property(e => e.Luser)
                    .HasMaxLength(50)
                    .HasColumnName("LUser");

                entity.Property(e => e.ModifyDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PaymentType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShortName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tc)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TC");
            });

            modelBuilder.Entity<TblReportFormat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbl_ReportFormat");

                entity.Property(e => e.EntryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("entryDate");

                entity.Property(e => e.FormatId)
                    .HasMaxLength(50)
                    .HasColumnName("formatID");

                entity.Property(e => e.FormatName)
                    .HasMaxLength(50)
                    .HasColumnName("formatName");

                entity.Property(e => e.Id)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modifyDate");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}